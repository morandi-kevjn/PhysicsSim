@page "/particles"
@inject IJSRuntime JS
@implements IDisposable

@using PhysicsSim.Core;

<h3>Particle Simulation</h3>

<canvas id="particleCanvas" width="800" height="400" style="border: 1px solid black;"></canvas>

<div class="mt-3">
    <button @onclick="StartSimulation">Start</button>
    <button @onclick="ResetSimulation">Reset</button>
</div>

@code {
    private List<ParticleDTO> particles = new ();
    private System.Timers.Timer? simulationTimer;

    protected override void OnInitialized()
    {
        particles.Add(new ParticleDTO { X = 100, Y =200, VX = 30, VY = 0 });
    }
    private async Task UpdateCanvas()
    {
        await JS.InvokeVoidAsync("particleSim.drawParticle", "particleCanvas", particles);
    }

    private void StartSimulation()
    {
        simulationTimer = new System.Timers.Timer(16); // ~60 FPS
        simulationTimer.Elapsed += async (_, _) =>
        {
            UpdatePhysics();
            await InvokeAsync(UpdateCanvas);
        };
        simulationTimer.Start();
    }

    private void UpdatePhysics()
    {
        float dt = 0.016f; // Time step in seconds (16 ms for ~60 FPS)
        foreach (var particle in particles)
        {
            particle.VY -= 9.81f * dt; // Gravity
            particle.X += particle.VX * dt;
            particle.Y += particle.VY * dt;
        }
    }

    private async Task ResetSimulation()
    {
        simulationTimer?.Stop();
        particles = new List<ParticleDTO> {
            new ParticleDTO { X = 100, Y = 200, VX = 30, VY = 0 }
        };
        await UpdateCanvas();
    }

	public void Dispose()
	{
		simulationTimer?.Dispose();
	}

    public class ParticleDTO
    {
        public float X { get; set; }
        public float Y { get; set; }
        public float VX { get; set; }
        public float VY { get; set; }
    }
}